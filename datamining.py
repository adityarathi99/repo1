# -*- coding: utf-8 -*-
"""DataMining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rDwcaSMdjZgNCSpjmSM5s-J2mXFPsPzA

# **Python ML Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.svm import SVC
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import preprocessing as prepro
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report,confusion_matrix
# %matplotlib inline

"""# **Data Preprocessing**"""

dataset = pd.read_csv('/content/drive/MyDrive/train.csv')

dataset = dataset.drop(["Dates", "Descript", "Resolution"], axis=1)

for i in ['DayOfWeek', 'PdDistrict', 'Address', 'Category']:
    dataset[i] = prepro.LabelEncoder().fit_transform(dataset[i])

y = dataset["Category"]
x = dataset.drop(["Category"], axis=1)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

dataset.head()

dataset.describe()

dataset.info()

"""# **Linear Regression**"""

lm = LinearRegression()
lm.fit(X_train,y_train)

predictions = lm.predict( X_test)

plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

sns.distplot((y_test-predictions),bins=50);



"""# **Logistic Regression**"""

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)

predictions = logmodel.predict(X_test)

print(classification_report(y_test,predictions))

"""# **Support Vector Machine**"""

svc_model = SVC()
svc_model.fit(X_train,y_train)
predictions = svc_model.predict(X_test)

svc_model1 = SVC(kernel='linear')
svc_model1.fit(X_train,y_train)
predictions1 = svc_model1.predict(X_test)

svc_model2 = SVC(kernel = 'sigmoid')
svc_model2.fit(X_train,y_train)
predictions2 = svc_model2.predict(X_test)

print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions1))
print(classification_report(y_test,predictions1))

print(confusion_matrix(y_test,predictions2))
print(classification_report(y_test,predictions2))

"""# **K neighbor**"""

scaler = StandardScaler()

scaler.fit(df.drop('TARGET CLASS',axis=1))

scaled_features

columns=df.columns[:-1]
columns

df_feat = pd.DataFrame(scaled_features, columns=df.columns[:-1])
df_feat.head()

X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET CLASS'],
                                                    test_size=0.30)

X_train

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train,y_train)

pred = knn.predict(X_test)

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

error_rate = []

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

knn = KNeighborsClassifier(n_neighbors=30)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=30')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))